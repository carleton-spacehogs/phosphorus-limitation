intersect(colnames(COGabun), tara_md$sample)
intersect(c(colnames(COGabun)), tara_md$sample)
colnames(COGabun)[1:10]
tara_md$sample[1:10]
tara_md$sample[10:20]
str_replace_all(colnames(COGabun), ".", "-")
str_replace_all(colnames(COGabun), "\.", "-")
str_replace(colnames(COGabun), ".", "-")
str_replace(colnames(COGabun), "\\.", "-")
colnames(COGabun)
str_replace(colnames(COGabun), "\\.3", "-3")
str_replace(str_replace(colnames(COGabun), "\\.3", "-3"), "\\.1.6", "-1.6")
get_COGabundance = function(to_fudge = TRUE) {
COGabun = read.csv(gene_abundance_file, sep = "\t")
colnames(COGabun) = str_replace(str_replace(colnames(COGabun), "\\.3", "-3"), "\\.1.6", "-1.6")
return(COGabun)
}
tara_md = init_tara_metadata()
COGabun = get_COGabundance()
intersect(c(colnames(COGabun)), tara_md$sample)
result_dirtory = 'MaAsLin_out/Tara_nutrient_COG'
colnames(tara_md)
View(COGabun)
get_COGabundance = function(to_fudge = TRUE) {
COGabun = read.csv(gene_abundance_file, sep = "\t")
colnames(COGabun) = str_replace(str_replace(colnames(COGabun), "\\.3", "-3"), "\\.1.6", "-1.6")
COGabun = COGabun %>% column_to_rownames(var="names")
return(COGabun)
}
COGabun = get_COGabundance()
get_COGabundance = function(to_fudge = TRUE) {
COGabun = read.csv(gene_abundance_file, sep = "\t")
colnames(COGabun) = str_replace(str_replace(colnames(COGabun), "\\.3", "-3"), "\\.1.6", "-1.6")
COGabun = COGabun %>% remove_rownames %>% column_to_rownames(var="names")
return(COGabun)
}
COGabun = get_COGabundance()
COGabun
# Retrieval and integration of metadata
init_tara_metadata = function(){
init_env()
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2 = md2 %>% remove_rownames %>% column_to_rownames(var="PANGAEA Sample ID")
return(md2)
}
get_COGabundance = function(to_fudge = TRUE) {
COGabun = read.csv(gene_abundance_file, sep = "\t")
colnames(COGabun) = str_replace(str_replace(colnames(COGabun), "\\.3", "-3"), "\\.1.6", "-1.6")
return(COGabun)
}
tara_md = init_tara_metadata()
COGabun = get_COGabundance()
tara_md
md2 = md2 %>% remove_rownames %>% column_to_rownames(var="sample")
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2 = md2 %>% remove_rownames %>% column_to_rownames(var="sample")
view(md2)
tara_md = tara_md[rownames(COGabun), ]
nrow(COGabun)
ncol(COGabun)
nrow(tara_md)
tara_md = init_tara_metadata()
tara_md = tara_md[colnames(COGabun), ]
nrow(tara_md)
View(tara_md)
tara_md = init_tara_metadata()
# Retrieval and integration of metadata
init_tara_metadata = function(){
init_env()
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2 = md2 %>% remove_rownames %>% column_to_rownames(var="sample")
return(md2)
}
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
colnames(tara_md)
rownames(md2)
split(rownames(md2), "_")
separate(data = md2, col = rownames(size_fraction))
separate(data = md2, col = rownames())
md2 = merge(linker, md, by = "PANGAEA Sample ID")
separate(data = md2, col = sample)
md2$sample
md2$size_fraction = str_extract(md$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*"
)
md2$sample
md2$sample = str_replace(md2$sample, "<", "0")
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
md2$size_fraction
md2$sample
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2$sample = str_replace(md2$sample, "<", "0.0")
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
md2$size_fraction
# Retrieval and integration of metadata
init_tara_metadata = function(){
init_env()
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2$sample = str_replace(md2$sample, "<", "0.0")
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
md2 = md2 %>% remove_rownames %>% column_to_rownames(var="sample")
return(md2)
}
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
result_dirtory = 'MaAsLin_out/Tara_nutrient_COG'
colnames(tara_md)
result_dirtory = 'MaAsLin_out/Tara_nutrient_COG'
fit_data <- Maaslin2(
nga, BGS_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','NO2NO3','NO2','Mean_Temperature',
'minimum generation time','size_fraction'),
normalization = 'NONE',
standardize = FALSE)
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','NO2NO3','NO2','Mean_Temperature',
'minimum generation time','size_fraction'),
normalization = 'NONE',
standardize = FALSE)
result_dirtory = 'MaAsLin_out/six_factors'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','NO2NO3','NO2','Mean_Temperature',
'minimum generation time','size_fraction'),
normalization = 'NONE',
standardize = FALSE)
colnames(tara_md)
tara_md$size_fraction
as.factor(tara_md$size_fraction)
tara_md$size_fraction = as.factor(tara_md$size_fraction)
result_dirtory = 'MaAsLin_out/Tara_nutrient_COG'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('NO2','Mean_temperature','PO4','NO2NO3',
'minimum generation time','size_fraction'),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
colnames(tara_md)
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('NO2','Mean_Temperature','PO4','NO2NO3',
'minimum generation time','size_fraction'),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
colnames(tara_md)
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','Mean_Temperature',"Mean_Nitrates",
'minimum generation time','size_fraction'),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4'), # 'PO4','Mean_Temperature',"Mean_Nitrates", 'minimum generation time','size_fraction'),
# reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
result_dirtory = 'MaAsLin_out/PO4_Nitrates'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4',"Mean_Nitrates"), # 'Mean_Temperature', 'minimum generation time','size_fraction'),
# reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
result_dirtory = 'MaAsLin_out/PO4'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4'), # 'Mean_Temperature', 'minimum generation time','size_fraction'),
# reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
result_dirtory = 'MaAsLin_out/PO4_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','size_fraction'), # 'Mean_Temperature', 'minimum generation time'),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
result_dirtory = 'MaAsLin_out/PO4_temp_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','size_fraction','Mean_Temperature'), # , 'minimum generation time'),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
standardize = FALSE)
colnames(tara_md)
result_dirtory = 'MaAsLin_out/PO4_temp_depth_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','size_fraction','Mean_Temperature', "Mean_Depth"),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
dev.off()
dev.off()
dev.off()
dev.off()
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('PO4','size_fraction','Mean_Temperature', "Mean_Depth"),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# setting the working directory to the location of this file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source(".init_tara.R")
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
result_dirtory = 'MaAsLin_out/logPO4_temp_logDepth_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('log_PO4','size_fraction','Mean_Temperature', "log_depth"),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
fudge_vec = function(vec) {
f = min(vec[!is.na(vec)])
return(vec + f)
}
md2$PO4
fudge_vec(md2$PO4)
fudge_vec = function(vec) {
tmp = vec[!is.na(vec)]
tmp = tmp[tmp > 0]
return(vec + min(tmp)/2)
}
md2$PO4
fudge_vec(md2$PO4)
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('log_PO4','size_fraction','Mean_Temperature', "log_depth"),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
fudge_vec(md2$PO4)
log(0)
knitr::opts_chunk$set(echo = TRUE)
# setting the working directory to the location of this file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source(".init_tara.R")
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
result_dirtory = 'MaAsLin_out/logPO4_temp_logDepth_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('log_PO4','size_fraction','Mean_Temperature', "log_depth"),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
result_dirtory = 'MaAsLin_out/temp_logDepth_size_logPO4'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('size_fraction','Mean_Temperature', "log_depth", 'log_PO4'),
random_effects = c("Mean_Lat"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
colnames(tara_md)
hist(tara_md$Mean_Oxygen)
hist(tara_md$Mean_Nitrates)
hist(tara_md$Mean_Oxygen)
hist(tara_md$NO2)
hist(tara_md$NO2NO3)
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
knitr::opts_chunk$set(echo = TRUE)
# setting the working directory to the location of this file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source(".init_tara.R")
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
view(tara_md)
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
View(md)
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(Mean_Nitrates = ifelse(Mean_nitrate > 0, Mean_nitrate, 0))
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2$sample = str_replace(md2$sample, "<", "0.0")
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
md2$log_PO4 = log10(fudge_vec(md2$PO4))
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(Mean_Nitrates = ifelse(Mean_nitrate > 0, Mean_nitrate, 0))
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(Mean_Nitrates = ifelse(Mean_Nitrate > 0, Mean_nitrate, 0))
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(Mean_Nitrates = ifelse(Mean_Nitrate > 0, Mean_Nitrate, 0))
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(Mean_Nitrates = ifelse(Mean_Nitrates > 0, Mean_Nitrates, 0))
md = read_excel(metadata_file, sheet = 9, col_names = TRUE, col_types = NULL, na = "NA", skip = 0)
linker = read_excel(metadata_file, sheet = 2, col_names = TRUE, skip = 0)[c(1,5)]
colnames(linker) = c("sample", "PANGAEA Sample ID")
linker %>% filter(! str_detect(sample, "<"))
colnames(md) = sapply(colnames(md), remove_special_chars)
md2 = merge(linker, md, by = "PANGAEA Sample ID")
md2$sample = str_replace(md2$sample, "<", "0.0")
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
# How can Mean_Nitrates be negative??? Change it all to 0
md2 %>% mutate(
Mean_Nitrates = ifelse(Mean_Nitrates > 0, Mean_Nitrates, 0),
log_Nitrates = log10(fudge_vec(Mean_Nitrates)),
log_PO4 = log10(fudge_vec(PO4)),
log_NO2 = log10(fudge_vec(NO2)),
log_NO2NO3 = log10(fudge_vec(NO2NO3)),
log_depth = log10(Mean_Depth))
md2$size_fraction = str_extract(md2$sample, "\\d+\\.\\d+-\\d+\\.?\\d*") # capture two numbers separated by a hyphen
# How can Mean_Nitrates be negative??? Change it all to 0
md2 = md2 %>%
mutate(log_PO4 = log10(fudge_vec(PO4)),
log_NO2 = log10(fudge_vec(NO2)),
log_NO2NO3 = log10(fudge_vec(NO2NO3)),
log_depth = log10(Mean_Depth),
Mean_Nitrates = ifelse(Mean_Nitrates > 0, Mean_Nitrates, 0),
log_Nitrates = log10(fudge_vec(Mean_Nitrates))) %>%
remove_rownames %>%
column_to_rownames(var="sample")
knitr::opts_chunk$set(echo = TRUE)
# setting the working directory to the location of this file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source(".init_tara.R")
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
tara_md$size_fraction = as.factor(tara_md$size_fraction)
result_dirtory = 'MaAsLin_out/logPO4_temp_logDepth_size'
result_dirtory = 'MaAsLin_out/logPO4_Oxygen_Nitrogen_temp_logDepth_size'
result_dirtory = 'MaAsLin_out/logPO4_Salinity_Oxygen_Nitrogen_temp_logDepth_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('size_fraction','Mean_Temperature', "log_depth",
'Mean_Salinity', 'Mean_Oxygen', 'log_PO4',
'log_Nitrate', 'logNO2', 'logNO3'),
random_effects = c("Mean_Lat", "Mean_Long"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
result_dirtory = 'MaAsLin_out/logPO4_Salinity_Oxygen_Nitrogen_temp_logDepth_size'
fit_data <- Maaslin2(
COGabun, tara_md, result_dirtory, transform = "LOG",
fixed_effects = c('size_fraction','Mean_Temperature', "log_depth",
'Mean_Salinity', 'Mean_Oxygen', 'log_PO4',
'log_Nitrates', 'log_NO2', 'log_NO2NO3'),
random_effects = c("Mean_Lat", "Mean_Long"),
reference = 'size_fraction,0.22-1.6',
max_significance = 0.05,
normalization = 'NONE',
min_prevalence = 0.33, # at least 1/3 of the sample has it
standardize = FALSE)
COGabun[c("COG0226")]
COGabun[c("COG0226"),]
COGabun[c("COG0226", "COG0573", "COG0581", "COG4985", "COG1117", "COG3638", "COG3221", "COG3639", "COG3624", "COG3625", "COG3626", "COG3627", "COG4107", "COG4778", "COG3454", "COG3709", "COG2764"),]
tmp = COGabun[c("COG0581", "COG4985", "COG1117", "COG3638", "COG3221", "COG3639", "COG3624", "COG3625", "COG3626", "COG3627", "COG4107", "COG4778", "COG3454", "COG3709", "COG2764"), ]
View(tmp)
tmp = COGabun[c("COG0581", "COG4985", "COG1117", "COG3638", "COG3221", "COG3639", "COG3624", "COG3625", "COG3626", "COG3627", "COG4107", "COG4778", "COG3454", "COG3709", "COG2764", "COG0395", "COG1653", "COG1134", "COG1392", "COG1840", "COG0704"), ]
tmp$COG_function = c("PstS", "PstC", "PstA_auxiliary", "PstB", "PhnC", "PhnD", "PhnE", "PhnG", "PhnH", "PhnI", "PhnJ", "PhnK", "PhnL", "PhnM", "PhnN", "PhnB", "UgpE", "UgpB", "TagH", "YkaA", "AfuA", "PhoU")
tmp = COGabun[c("COG0226", "COG0573", "COG0581", "COG4985", "COG1117", "COG3638", "COG3221", "COG3639", "COG3624", "COG3625", "COG3626", "COG3627", "COG4107", "COG4778", "COG3454", "COG3709", "COG2764", "COG0395", "COG1653", "COG1134", "COG1392", "COG1840", "COG0704"), ]
tmp$COG_function = c("PstS", "PstC", "PstA", "PstA_auxiliary", "PstB", "PhnC", "PhnD", "PhnE", "PhnG", "PhnH", "PhnI", "PhnJ", "PhnK", "PhnL", "PhnM", "PhnN", "PhnB", "UgpE", "UgpB", "TagH", "YkaA", "AfuA", "PhoU")
c(ncol(tmp), 2:ncol(tmp)-1)
tmp[tmp[c(ncol(tmp), 2:ncol(tmp)-1)]]
tmp = tmp[c(ncol(tmp), 2:ncol(tmp)-1)]
write.csv(tmp, "phosphorous_COGs_abundance.csv", row.names=TRUE)
source(".init_tara.R") # important for importing Jimmy's functions (thanks Jimmy)
tara_md = init_tara_metadata()
COGabun = get_COGabundance() # only the prokaryote fraction
tara_md = tara_md[colnames(COGabun), ]
result_dir = 'MaAsLin_out/logPO4_sqrtIron_logNO2NO3_Salinity_Oxygen_temp_logDepth_size'
param = c('size_fraction','Mean_Temperature', "log_depth", 'Mean_Salinity',
           'Mean_Oxygen', 'log_PO4','log_NO2NO3', "sqrt_iron")
# end of Jimmy's code
# Jimmy's MaAsLin call:
# 
# fit_data <- Maaslin2(
#     COGabun, tara_md, result_dir, transform = "LOG",
#     fixed_effects = param,
#     random_effects = c("Mean_Lat", "Mean_Long"),
#     reference = 'size_fraction,0.22-1.6',
#     max_significance = 0.05,
#     normalization = 'NONE',
#     min_prevalence = 0.33, # at least 1/3 of the sample has it
#     standardize = FALSE)
# changing result_dir to my own
result_dir <- "MaAsLin_out/logCOGabun_against_logPO4_sqrtIron_logNO2NO3_Salinity_Oxygen_temp_logDepth_size"
# taking the log of the abundance data before running my own MaAsLin
my_log <- function(x) {
  return(log10(x + 1e-9)) # add a small number to avoid log(0)
}                         # choose 1e-9 because a few values are below 1e-8
View(COGabun)
View(COGabun)
??setwd
head(CO2)
head(COGabun)
COGabun_log <- sapply(COGabun[1:ncol(COGabun)], my_log)
names(COGabun)[1:5]
names(COGabun_log)[1:5]
names(COGabun_log)
typeof(COGabun_log)
?sapply
library(languageserver)
?sapply
?sapply
COGabun_log <- vapply(COGabun[1:ncol(COGabun)], my_log)
COGabun_log <- vapply(COGabun[1:ncol(COGabun)], my_log, FUN.VALUE = COGabun)
COGabun_log <- sapply(COGabun[1:ncol(COGaCOGabun_log <- sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "data.frame")bun)], my_log)
COGabun_log <- sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "data.frame")
names(COGabun_log)[1:5]
typeof(COGabun_log)
COGabun_log <- sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "array")
typeof(COGabun_log)
COGabun_log <- sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "array")COGabun_log <- as.tibble(sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "array"))
COGabun_log <- as.tibble(sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "array"))
COGabun_log <- as_tibble(sapply(COGabun[1:ncol(COGabun)], my_log, simplify = "array"))
typeof(COGabun_log)
typeof(COGabun)
names(COGabun_log)
names(COGabun_log)[1:5]
names(COGabun)[1:5]
COGabun_log <- as_tibble(sapply(COGabun[1:ncol(COGabun)], my_log))
names(COGabun_log)[1:5]
names(COGabun_log)[1:5] == names(COGabun)[1:5]
q()
head(COGabun)
head(COGabun)[,1:4]
head(COGabun)[,1:3]
head(COGabun_log)[,1:3]
rownames(COGabun_log) <- rownames(COGabun)
head(COGabun_log)[,1:3]
log(COGabun[1,1])
log(COGabun[1,1]+1e-9)
log10(COGabun[1,1]+1e-9)
log10(COGabun[1,1])
q()
min(COGabun_log[,1])
q()
load(.RData)
load(".RData")
print("hello")
print(load(".RData"))
print(load("logCOGabun_against_logPO4_sqrtIron_logNO2NO3_Salinity_Oxygen_temp_logDepth_size/.RData"))
print(load("Tara_MaAsLin_correlation/MaAsLin_out/logCOGabun_against_logPO4_sqrtIron_logNO2NO3_Salinity_Oxygen_temp_logDepth_size/.RData"))
q()
print(load("MaAsLin_out/logCOGabun_against_logPO4_sqrtIron_logNO2NO3_Salinity_Oxygen_temp_logDepth_size/.RData"))
q()
q()
warnings()
q()
